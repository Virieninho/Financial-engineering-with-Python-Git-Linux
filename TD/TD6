# TD6
## Exercise 1 : Configure Git
1. Check that Git is installed on your environment.
```
git --version
sudo apt-get install git
```
2. Configure your name and e-mail globally
```
git config --global user.name "Virien Sun"
git config --global user.email "virien.sun@edu.devinci.fr"
```
3. Check that Git has correctly recorded these two pieces of information.
```
git config --list
```
## Exercise 2 : Basic workflow with a single file
1. Create a git repository
```
git init
```
2. Check that git has correctly initiliazed a repository by displaying the files wihtin your current folder
```
ls
```
3. Check the current git status
```
git status
```
4. Create a text file named “readme.md” whose content is “# Test repository”
```
echo "# Test repository" > readme.md
```
5. Check the current git status
```
git status
```
6. Stage the file
```
git add readme.md
```
7. Check the current git status
```
git status
```
8. Commit the file
```
git commit -m "Add readme.md file"
```
9. Check the current git status
```
git status
```
10. Check the git logs
```
git log
```
## Exercise 3: Basic workflow with multiple files treated separately
1. Create two empty python files named “main.py” and “functions.py”
```
touch main.py functions.py
```
2. Check the current git status
```
git status
```
3. Stage only the file “main.py”
```
git add main.py
```
4. Check the current git status
```
git status
```
5. Commit the file with an appropriate message
```
git commit -m "Add main.py file"
```
6. Check the current git status
```
git status
```
7. Now stage and commit the file “functions.py”
```
git add functions.py
git commit -m "Add functions.py file"
```
8. Check the current git status
```
git status
```
9. Check the git logs
```
git log
```
## Exercise 4: Basic workflow with multiple files treated all at once
1. Create three empty files named “requirements.txt”, “.gitignore” and “.private”
```
touch requirements.txt .gitignore .private
```
2. Check the current git status
```
git status
```
3. Stage all the files at once
```
git add requirements.txt .gitignore .private
```
4. Check the current git status
```
git status
```
5. Commit the current staged files
```
git commit -m "Add requirements, gitignore, and private files"
```
6. Check the current git status
```
git status
```
7. Check the git logs where each log is displayed on a single line
```
git log --pretty=oneline
```
## Exercise 5: Private files
1. Emulate a temporary empty file by creating a file named “temp.ipynb”
```
touch temp.ipynb
```
2. Check the current git status
```
git status
```
3. Add an instruction to .gitignore to prevent git from tracking this temp
file
```
echo "temp.ipynb" >> .gitignore
```
4. Check the current git status
```
git status
```
5. Create other temporary files named “temp.aux” and “temp.log”
```
touch temp.aux temp.log
```
6. Check the current git status
```
git status
```
7. Change your instruction in .gitignore to prevent git from tracking any file which name starts with “temp”
```
echo "temp*" > .gitignore
```
8. Check the current git status
```
git status
```
9. Now let’s consider your personal notes will be added to the “.private” folder. Use the “exclude” git file to prevent git from tracking this “.private” folder
```
echo ".private/" > .git/info/exclude
```
## Exercise 6: Difference between versions
1. Add a online description of your repository in the “readme.md” fil
2. Stage your “readme.md” file
```
$ git add readme.md
```
3. Display the changes in your root directory since the last commit (not just the current status)
```
$ git diff HEAD
```
4. Commit your change
```
$ git commit -m "Add online description to readme.md"
```
5. Display the changes since the last commit
```
$ git diff HEAD^
```
6. Display again the changes in your root directory since the last commit
```
$ git diff HEAD
```
7. Change some words in the description of the “readme.md”
8. Display the changes since the last commit
```
$ git diff HEAD^
```
## Exercise 7: Undo
1. Suppress all your files.
2. Use Git to restore your files.
```
git checkout
```
3. Backup your Git repository elsewhere (pretending a copy exists on another colleague’s computer or on a remote server).
4. Suppress your root directory, create a new empty one and use your backup to restore everything.
```
rm -rf /path/to/root/directory
```
5. Unstage your first file
```
git reset HEAD <file>
```
6. Commit your two file changes directly, without staging them.
```
git commit -a -m "commit message"
```
7. Check your commit log history. Do you see your new commit ?
```
git log
```
8. Without affecting your Git repository, set your root directory state as of the snapshot of your first commit.
```
git checkout -b <new_branch_name> <commit_id>
```
9. Check your commit log history. You do not see all commits, do you ? How can you see all of them ?
```
git log --all
```
10. Return to the snapshot of your your last commit.
```
git checkout master
```
11. Undo your second commit by adding a new commit that reverts it.
```
git revert <commit_id>
```
12. Check the content of your root directory. Have your previous changes disappeard ?
13. Check your commit log history. Do you see your revert commit ?
```
git log
```
14. Remove the last 2 commits from the history.
```
git reset --hard HEAD~2
```
15. Check the content of your root directory. Have your previous changes disappeard ?
16. Check your commit log history. Have you lost the last 2 commits ?
```
git log
```
## Exercise 8: Aliases
```
nano ~/.gitconfig
[alias]
    s = status
    co = checkout
    b = branch
    ci = commit
    dog = log --all --decorate --oneline --graph
    dag = log --all --decorate --graph
    list = diff-tree --no-commit-id --name-only -r
    unstage = reset HEAD --
    last = log -1 HEAD
```
## Exercise 9: Hashing
1. Create a root directory.
```
mkdir my_project
```
2. Create a text file inside whose content is “Hello World”.
```
echo "Hello World" > myfile.txt
```
3. What is the size of the file ?
```
ls -lh myfile.txt
```
4. Display the file content on the screen.
```
cat myfile.txt
```
5. Compute the SHA-1 hash of the file content.
```
sha1sum myfile.txt
```
6. What hash would Git compute on this file ?
```
git hash-object myfile.txt
```
7. Create a second file whose content is what Git would really consider when saving your first file.
```
echo -e "blob $(wc -c < myfile.txt)\0$(cat myfile.txt)" > mygitfile.txt
```
8. Compute the SHA-1 hash of this second file and check it is equal to the Git hash of your first file.
```
sha1sum mygitfile.txt
git hash-object -w myfile.txt
git cat-file -p <hash>
```
